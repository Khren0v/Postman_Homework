HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
Get method -> Send

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.
pm.test("Check_string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
POST method -> { "name":"Kirill", "age":"31", "salary":"2000" } -> Send

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let respData = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Check_name", function () {
    pm.expect(respData.name).to.eql("Kirill");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Check_age", function () {
    pm.expect(+respData.age).to.eql(31);
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Check_salary", function () {
    pm.expect(+respData.salary).to.eql(2000);
});

7. Спарсить request.
let reqData = request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check_name_req", function () {
    pm.expect(respData.name).to.eql(reqData.name);
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Check_age_req", function () {
    pm.expect(+respData.age).to.eql(+reqData.age);
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check_salary_req", function () {
    pm.expect(+respData.salary).to.eql(+reqData.salary);
});

11. Вывести в консоль параметр family из response.
console.log(respData.family);

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Check_salary_1_5_req", function () {
    pm.expect(+respData.family.u_salary_1_5_year).to.eql(+reqData.salary*4);
});

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
Get method -> object_info_3?name=Kirill&age=31&salary=2000 -> Send

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let respData = pm.response.json();

4. Спарсить request.
let reqData = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check_name_req", function () {
    pm.expect(respData.name).to.eql(reqData.name);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Check_age_req", function () {
    pm.expect(+respData.age).to.eql(+reqData.age);
});

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check_salary_req", function () {
    pm.expect(+respData.salary).to.eql(+reqData.salary);
});

8. Вывести в консоль параметр family из response.
console.log(respData.family);

9. Проверить, что у параметра dog есть параметры name.
pm.test("Check_param_name", function () {
    pm.expect(respData.family.pets.dog).to.have.property("name");
});

10. Проверить, что у параметра dog есть параметры age.
pm.test("Check_param_age", function () {
    pm.expect(respData.family.pets.dog).to.have.property("age");
});

11. Проверить, что параметр name имеет значение Luky.
pm.test("Check_param_value_name", function () {
    pm.expect(respData.family.pets.dog.name).to.eql("Luky");
});

12. Проверить, что параметр age имеет значение 4.
pm.test("Check_param_value_age", function () {
    pm.expect(+respData.family.pets.dog.age).to.eql(4);
});

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
Get method -> object_info_3?name=Kirill&age=31&salary=2000 -> Send

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let respData = pm.response.json();

4. Спарсить request.
let reqData = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check_name_req", function () {
    pm.expect(respData.name).to.eql(reqData.name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Check_age_req", function () {
    pm.expect(+respData.age).to.eql(reqData.age);
});

7. Вывести в консоль параметр salary из request.
console.log(reqData.salary);

8. Вывести в консоль параметр salary из response.
console.log(respData.salary);

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(respData.salary[0]);

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(respData.salary[1]);

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(respData.salary[2]);

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Check_salary_0_req", function () {
    pm.expect(+respData.salary[0]).to.eql(+reqData.salary);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check_salary_1_req", function () {
    pm.expect(+respData.salary[1]).to.eql(+reqData.salary*2);
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check_salary_2_req", function () {
    pm.expect(+respData.salary[2]).to.eql(+reqData.salary*3);
});

15. Создать в окружении переменную name
Environments -> name

16. Создать в окружении переменную age
Environments -> age

17. Создать в окружении переменную salary
Environments -> salary

18. Передать в окружение переменную name
pm.environment.set("name", reqData.name);

19. Передать в окружение переменную age
pm.environment.set("age", reqData.age);

20. Передать в окружение переменную salary
pm.environment.set("salary", reqData.salary);

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (let i in respData.salary) {
    console.log(+respData.salary[i])
};

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
Body -> {{salary}}

2. Вставить параметр age из окружения в age
Body -> {{age}}

3. Вставить параметр name из окружения в name
Body -> {{name}}

4. Отправить запрос.
Send

5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

6. Спарсить response body в json.
let respData = pm.response.json();

7. Спарсить request.
let reqData = request.data;

8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Check_param_start_qa_salary", function () {
    pm.expect(respData).to.have.property("start_qa_salary");
});

9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Check_param_qa_salary_after_6_months", function () {
    pm.expect(respData).to.have.property("qa_salary_after_6_months");
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Check_param_qa_salary_after_12_months", function () {
    pm.expect(respData).to.have.property("qa_salary_after_12_months");
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Check_param_qa_salary_after_1.5_year", function () {
    pm.expect(respData).to.have.property("qa_salary_after_1.5_year");
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Check_param_qa_salary_after_3.5_years", function () {
    pm.expect(respData).to.have.property("qa_salary_after_3.5_years");
});

13. Проверить, что json response имеет параметр person
pm.test("Check_param_person", function () {
    pm.expect(respData).to.have.property("person");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Check_start_qa_salary_req", function () {
    pm.expect(+respData.start_qa_salary).to.eql(+reqData.salary);
});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Check_qa_salary_after_6_months_req", function () {
    pm.expect(+respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);
});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Check_qa_salary_after_12_months_req", function () {
    pm.expect(+respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);
});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("Check_qa_salary_after_1.5_year_req", function () {
    pm.expect(+respData["qa_salary_after_1.5_year"]).to.eql(+reqData.salary*3.3);
});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Check_qa_salary_after_3.5_years_req", function () {
    pm.expect(+respData["qa_salary_after_3.5_years"]).to.eql(+reqData.salary*3.8);
});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Check_u_name_req", function () {
    pm.expect(+respData.person.u_name[1]).to.eql(+reqData.salary);
});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Check_u_age_req", function () {
    pm.expect(+respData.person.u_age).to.eql(+reqData.age);
});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("Check_u_salary_5_years_req", function () {
    pm.expect(+respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);
});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (let personKey in respData.person) {
    console.log(personKey + ': ' + respData.person[personKey])
};
